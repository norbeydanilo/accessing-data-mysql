package com.example.accessingdatamysql.controllers;

import com.example.accessingdatamysql.entities.User;
import com.example.accessingdatamysql.repositories.UserRepository;

import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/") // Map ONLY POST Requests
    public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @PostMapping("/json")
    @ResponseBody
    public User createUser(@RequestBody User user) {
        // custom logic
        userRepository.save(user);
        return user;
    }

    @PostMapping(path = "/json-alt")
    public @ResponseBody HashMap<String, Object> addNewUserJson(@RequestBody User user) {
        // custom logic
        userRepository.save(user);
        HashMap<String, Object> map = new HashMap<>();
        map.put("Status", 200);
        map.put("Message", "Request Successful");
        map.put("Data", user);
        return map;
    }

    @GetMapping(path = "/")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/{name}")
    public @ResponseBody User getByName(@PathVariable("name") String name) {
        // This returns a JSON or XML with the users
        return userRepository.findByName(name);
    }

    @GetMapping("/alternative/{name}")
    public ResponseEntity<User> getUser(@PathVariable String name) {
        User user = userRepository.findByName(name);
        return new ResponseEntity<>(user, HttpStatus.OK);
    }
}
